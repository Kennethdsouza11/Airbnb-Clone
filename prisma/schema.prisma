// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//demo 
model User {
  id           String        @id @unique //@id directive tells prisma that id field is the primary key. and @default(uuid()) means that if no value is provided for the id field, prisma will automatically generate a UUID for it using the uuid() function
  email        String
  firstName    String
  lastName     String
  profileImage String? //this means that profileImage could be optional it could have a value or it couldnt
  Home         Home[] //user can have multiple homes but one home can have one user hence one to many relations. Home[] here is used to indicate that it is a one to many relation. Here Home is referring to multiple records of the Home model.
  Favourite    Favourite[]
  Reservation  Reservation[]
}

model Home {
  id               String        @id @default(uuid())
  title            String?
  description      String?
  bathrooms        String?
  guests           String?
  bedrooms         String?
  country          String?
  photo            String?
  price            Int?
  createdAt        DateTime      @default(now())
  User             User?         @relation(fields: [userId], references: [id])
  userId           String?
  addedCategory    Boolean       @default(false)
  addedDescription Boolean       @default(false)
  addedLocation    Boolean       @default(false)
  categoryName     String?
  Favourite        Favourite[] //to tell that favourite table is a many to one relationship as a user can have many favourites but each favourite will have only one user
  Reservation      Reservation[]
}

model Favourite {
  id String @id @default(uuid())

  Home      Home?    @relation(fields: [homeId], references: [id])
  homeId    String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model Reservation {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Home      Home?    @relation(fields: [homeId], references: [id])
  homeId    String?
}
